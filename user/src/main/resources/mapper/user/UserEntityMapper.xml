<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.together.modules.user.mapper.UserMapper">

    <resultMap id="byuserReferrerMap" type="com.together.modules.user.entity.UserReferrerDo">
        <!--指定主键列的封装规则
		id定义主键会底层有优化；
		column：指定哪一列
		property：指定对应的javaBean属性
		  -->
        <id column="user_id" property="user_id"/>
        <!-- 定义普通列封装规则 -->
        <result column="user_level" property="user_level"/>
        <!-- 其他不指定的列会自动封装：我们只要写resultMap就把全部的映射规则都写上。 -->
        <result column="user_referrer" property="user_referrer"/>
        <result column="routing" property="routing"/>
        <collection property="userReferrerDos" ofType="com.together.modules.user.entity.UserReferrerDo" select="selectByuserReferrerId" column="user_id">
        </collection>
    </resultMap>

    <select id="selectByuserReferrerId" resultMap="byuserReferrerMap">
        select user_id,user_level,user_referrer,routing from `user` where user_referrer=#{referrerId}
    </select>


    <resultMap id="UserSuperstratum" type="com.together.entity.UserSuperstratumRelationDo">
        <id column="user_id" property="user_id"/>
        <!-- 定义普通列封装规则 -->
        <result column="top_referee_id" property="topRefereeId"/>
        <!-- 其他不指定的列会自动封装：我们只要写resultMap就把全部的映射规则都写上。 -->
        <result column="user_level" property="userLevel"/>
        <result column="user_referrer" property="userReferrer"/>
    </resultMap>

    <select id="selectUserSuperstratum"  resultMap="UserSuperstratum">
        select user_id ,top_referee_id ,user_level ,user_referrer from `user` where user_id = #{user_id}
    </select>


    <select id="selectUserALlInviter" resultType="com.together.modules.user.entity.UserEntity">
        select * from `user` where user_referrer=#{user_id}
    </select>

    <select id="selectUserByids"  resultType="com.together.modules.user.entity.UserEntity">
        select * from `user`
        <!--
	 		collection：指定要遍历的集合：
	 			list类型的参数会特殊处理封装在map中，map的key就叫list
	 		item：将当前遍历出的元素赋值给指定的变量
	 		separator:每个元素之间的分隔符
	 		open：遍历出所有结果拼接一个开始的字符
	 		close:遍历出所有结果拼接一个结束的字符
	 		index:索引。遍历list的时候是index就是索引，item就是当前值
	 				      遍历map的时候index表示的就是map的key，item就是map的值

	 		#{变量名}就能取出变量的值也就是当前遍历出的元素
	 	  -->
        <foreach collection="array" index="index" item="item_id" separator=","
                 open="where user_id in(" close=")">
            #{item_id}
        </foreach>
        order by user_id desc
    </select>

</mapper>
